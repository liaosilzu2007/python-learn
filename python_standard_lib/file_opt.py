# -*- coding:utf-8 -*-
"""
"""
import os

# 1. 文件读写
# 1.1 打开文件
'''
Python 的 open() 方法用于打开一个文件，并返回文件对象。如果该文件无法被打开，会抛出 OSError。

注意：使用 open() 方法一定要保证关闭文件对象，即调用 close() 方法。

open() 函数常用形式是接收两个参数：文件名(file)和模式(mode)。

open(file, mode='r')
完整的语法格式为：

open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)
参数说明:

file: 必需，文件路径（相对或者绝对路径）。
mode: 可选，文件打开模式
buffering: 设置缓冲
encoding: 一般使用utf8
errors: 报错级别
newline: 区分换行符
closefd: 传入的file参数类型
opener: 设置自定义开启器，开启器的返回值必须是一个打开的文件描述符。

mode 参数有：

模式	描述
t	    文本模式 (默认)。
x	    写模式，新建一个文件，如果该文件已存在则会报错。
b	    二进制模式。
r	    以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
rb	    以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
r+	    打开一个文件用于读写。文件指针将会放在文件的开头。
rb+	    以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
w	    打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb	    以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
w+	    打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
wb+	    以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
a	    打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
ab	    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
a+	    打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。
ab+	    以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。

默认为文本模式，如果要以二进制模式打开，加上 b 。
'''
with open(r"C:\Users\lenovo\Desktop\新建文本文档 (2).txt",mode='r+', encoding='gbk') as f:       # 在windows系统当中读取文件路径可以使用\,但是在python字符串中\有转义的含义，如\t可代表TAB，\n代表换行，所以我们需要采取一些方式使得\不被解读为转义字符。在路径前面加r，即保持字符原始值的意思。 
    for line in f:
        print(line, end="")



# 1.1 编码问题
# Python 的 open 方法默认编码取决于平台，如果是 Windows 平台，默认编码是 gbk，如果文件是 utf-8 编码，就会报这个错：UnicodeDecodeError: ‘gbk’ codec can’t decode byte
# 解决办法
'''
将打开文件的代码：

open(filename, 'r')

改为：

open(filename, 'r', encoding='utf-8')
'''


# 2. file 对象的常用方法
'''
file.close()：关闭文件。关闭后文件不能再进行读写操作。调用open方法之后，一般需要在 finally 语句中将文件关闭。但如果以with...as...方式打开文件，每次执行完毕之后会自动关闭该文件。
	
file.flush()：刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。

file.read([size])：从文件读取指定的字节数，如果未给定或为负则读取所有。一般用于读取二进制文件。

file.readline([size])：读取整行，包括 "\n" 字符。

file.write(str):将字符串写入文件，返回的是写入的字符长度。

file.writelines(str):将一行内容写入文件。内容的末尾需要加换行符，该

'''

with open(r"C:\Users\lenovo\Desktop\test.txt",mode='a+', encoding='utf-8') as f: 
    f.writelines('abc\n')
    f.writelines('123456\n')


# 3.文件的删除
'''
文件的删除需要使用os模块和os.path模块。os模块提供了对系统环境、文件、目录等操作系统级的接口函数。
文件的删除需要调用remove()函数实现。要删除文件之前需要先判断文件是否存在，若存在则删除，不存在则不进行操作，如果文件被其他占用则不能删除，报错如下：PermissionError: [WinError 32] 另一个程序正在使用此文件，进程无法访问。: 'a.txt'。
'''

file_name=r"C:\Users\lenovo\Desktop\test1.txt"
if os.path.exists(file_name):
    os.remove(file_name)
    print("删除文件成功" + file_name)
else:
    print("要删除的文件不存在")


# 4.文件重命名
'''
使用os.rename()模块进行文件重命名。
'''
li = os.listdir('.')
print(li)   #返回一个文件列表
if 'a1.txt' in li:  #判断文件是否存在
    os.rename('a1.txt','A1.txt')