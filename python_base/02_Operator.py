# ================运算================

# Python语言支持以下类型的运算符:
"""
1. 算术运算符
2. 比较运算符
3. 赋值运算符
4. 逻辑运算符
5. 位运算符
6. 成员运算符
7. 身份运算符
8 运算符优先级
"""

# 1. 算术运算符
print("====1. 算术运算符====")
# 数字的算数运算符，除了加（+）、减（-）、乘（*）、除（/）四个最简单的运算符，还支持如下三种
'''
%：取模，返回除法的余数
**： 幂运算，x**y返回x的y次幂	
//：取整除，返回商的整数部分（向下取整）
'''

a = 3
b = 5
print(5 % 3)  # 2
print(5 ** 3)  # 125
print(5 // 3)  # 1


# 2. 比较运算符
print("====2. 比较运算符====")
# 比较运算符会返回true或false，Python支持如下比较运算符：==（等于）、!=(不等于)、>（大于）、>=（大于等于）、<（小于）、<=（小于等于）

# 3. 赋值运算符
print("====3. 赋值运算符====")
# 最常用、最简单的赋值运算符就是=。如果是数字类型变量，还支持如下赋值运算符：
'''
+=	加法赋值运算符	c += a 等效于 c = c + a
-=	减法赋值运算符	c -= a 等效于 c = c - a
*=	乘法赋值运算符	c *= a 等效于 c = c * a
/=	除法赋值运算符	c /= a 等效于 c = c / a
%=	取模赋值运算符	c %= a 等效于 c = c % a
**=	幂赋值运算符	c **= a 等效于 c = c ** a
//=	取整除赋值运算符	c //= a 等效于 c = c // a

:=	海象运算符，这个运算符的主要目的是在表达式中同时进行赋值和返回赋值的值。Python3.8 版本新增运算符。	
'''
# 传统写法
n = 10
if n > 5:
    print(n)

# 使用海象运算符
if (n := 10) > 5:
    print(n)


# 4. 逻辑运算符
print("====4. 逻辑运算符====")
# 支持的逻辑运算符：and、or、not，假设变量 a 为 10, b为 20:
'''
and：	x and y	布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	(a and b) 返回 20。
or：	x or y	布尔"或" - 如果 x 是非 0，它返回 x 的计算值，否则它返回 y 的计算值。	(a or b) 返回 10。
not：   not x	布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	not(a and b) 返回 False
'''

a = 10
b = 20

if a and b:
    print("1 - 变量 a 和 b 都为 true")
else:
    print("1 - 变量 a 和 b 有一个不为 true")

if a or b:
    print("2 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
    print("2 - 变量 a 和 b 都不为 true")

# 修改变量 a 的值
a = 0
if a and b:
    print("3 - 变量 a 和 b 都为 true")
else:
    print("3 - 变量 a 和 b 有一个不为 true")

if a or b:
    print("4 - 变量 a 和 b 都为 true，或其中一个变量为 true")
else:
    print("4 - 变量 a 和 b 都不为 true")

if not(a and b):
    print("5 - 变量 a 和 b 都为 false，或其中一个变量为 false")
else:
    print("5 - 变量 a 和 b 都为 true")

# 注意：逻辑运算符的有优先级为：not > and > or    
x = True
y = False
z = False
 
if x or y and z:
    print("yes")
else:
    print("no")

'''
以上实例先计算 y and z 并返回 False ，然后 x or False 返回 True，输出结果：

yes
'''



# 5. 位运算符
print("====5. 位运算符====")
# 位运算符是把数字看作二进制来进行计算的。Python中支持的位运算符如下：
'''
&	按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0	
|	按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	
^	按位异或运算符：当两对应的二进位相异时，结果为1	
~	按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1 。~x 类似于 -x-1。	
<<	左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。	
>>	右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数
'''
a = 60      # 60的二进制表示： 0011 1100
b = 13      # 13的二进制表示 0000 1101
print(a & b)        # (a & b) 输出结果 12 ，二进制解释： 0000 1100
print(a | b)        # (a | b) 输出结果 61 ，二进制解释： 0011 1101
print(a ^ b)        # (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
print(~a)           # (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。
print(a << 2)       # a << 2 输出结果 240 ，二进制解释： 1111 0000
print(a >> 2)


# 6. 成员运算符
print("====6. 成员运算符====")
# 除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。
'''
in	如果在指定的序列中找到值返回 True，否则返回 False。	x 在 y 序列中 , 如果 x 在 y 序列中返回 True。
not in	如果在指定的序列中没有找到值返回 True，否则返回 False。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。
'''
a = 10
b = 20
c = 3
list = [1, 2, 3, 4, 5]

if (a in list):
    print("1 - 变量 a 在给定的列表中 list 中")
else:
    print("1 - 变量 a 不在给定的列表中 list 中")

if (b not in list):
    print("2 - 变量 b 不在给定的列表中 list 中")
else:
    print("2 - 变量 b 在给定的列表中 list 中")

if (c in list):
    print("3 - 变量 c 在给定的列表中 list 中")
else:
    print("3 - 变量 c 不在给定的列表中 list 中")
